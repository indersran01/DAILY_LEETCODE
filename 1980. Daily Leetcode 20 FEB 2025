1980. Find Unique Binary String

Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

 

Example 1:

Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.
Example 2:

Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.
Example 3:

Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
 

Constraints:

n == nums.length
1 <= n <= 16
nums[i].length == n
nums[i] is either '0' or '1'.
All the strings of nums are unique.

code:
class Solution {
    public String solve(HashSet<String>set,int ind,String temp,int n)
    {
        if(temp.length()==n)
        {
            if(set.contains(temp)==false)
            return temp;
            return " ";
        }
        String t="";
        for(int i=ind;i<n;i++)
        {
            temp=temp+"1";
            t=solve(set,ind+1,temp,n);
            if(t.equals(" "))
            {
                temp=temp.substring(0,temp.length()-1);
                temp=temp+"0";
                t=solve(set,ind+1,temp,n);
            }
            else
            return t;        
        }
        return t;



    }
    public String findDifferentBinaryString(String[] nums) 
    {
        HashSet<String>set=new HashSet<>();
        int n=nums[0].length();
        for(String w:nums)
        {
            set.add(w);
        }
        return solve(set,0,"",n);

    }
}
